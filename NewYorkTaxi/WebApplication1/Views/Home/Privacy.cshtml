@{
    ViewData["Title"] = "Privacy Policy";
}
<h1>@ViewData["Title"]</h1>
@model NewYorkTaxi.DisplayModel.AveragePassengerDisplay


@{
    ViewData["Title"] = "View";
}

<h1>Average Data</h1>
<h1>Her skal Det meget gerne stå en graf under!!</h1>
<p>
    @*<a asp-action="Create">Create New</a>*@
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Label.VendorID)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Label.PassengerCountAverage)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>

        @foreach (var item in Model.AvgPassengers)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.VendorID)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PassengerCountAverage)
                </td>
                <td>
                    @*@Html.ActionLink("Edit", "Edit", new { /* id=item.PrimaryKey */ }) |
                        @Html.ActionLink("Details", "Details", new { /* id=item.PrimaryKey */ }) |
                        @Html.ActionLink("Delete", "Delete", new { /* id=item.PrimaryKey */ })*@
                </td>
            </tr>
        }
    </tbody>
</table>

<head>
    <!--Load the AJAX API-->
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script type="text/javascript">

        // Load the Visualization API and the corechart package.
        google.charts.load('current', { 'packages': ['corechart'] });

        // Set a callback to run when the Google Visualization API is loaded.
        google.charts.setOnLoadCallback(drawChart);


        // Callback that creates and populates a data table,
        // instantiates the pie chart, passes in the data and
        // draws it.
        function drawChart() {

            // Create the data table.
            var data = new google.visualization.DataTable();
            data.addColumn('string', 'Vendor id');
            data.addColumn('number', 'Passengers Carried');
          @Model.SortDistinctVendors()

            data.addRows([
                 @foreach (var item in Model.DistinctVendors)
                 {
                     Model.Iterate(Model.VendorIdLabel);
                //iterator slutter på count-1, så -2 er den sidste plads i collectionen
                if (Model.iterator < Model.DistinctVendors.Length-2)
                {
                         //find en måde at skrive den gennemsnitlige passagerantal her + find en måde at tage Vendor Id fra displaymodel.
                    Model.displaydata = $"['Vendor number {Model.VendorIdLabel}', {item.Average()}],";
                }
                else
                {
                         Model.Iterate(Model.VendorIdLabel);
                    Model.displaydata = $"['Vendor number {Model.VendorIdLabel}', {item.Average()}]";
                }
                         <text> @Model.displaydata </text>
                    Model.Iterate(Model.iterator);
                  }
            ]);
              @Model.NumberReset(Model.iterator);
            @Model.NumberReset(Model.VendorIdLabel);

                         // Set chart options
                         var options = {
                'title': 'Higest average passangercount',
                'width': 500,
                'height': 400
            };

                     // Instantiate and draw our chart, passing in some options.
                     var chart = new google.visualization.PieChart(document.getElementById('chart_div'));
                     chart.draw(data, options);
        }
    </script>
</head>

<body>
    <!--Div that will hold the pie chart-->
    <div id="chart_div"></div>
</body>
